#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../lib', File.dirname(__FILE__))

require 'keyble'
require 'optparse'
require 'net/scp'

def interpret_args(args)
  options = Hash.new { |h, k| h[k] = [ ] }

  args.collect do |arg|
    if (arg.match(/@/))
      options[:keys] << arg
    elsif (arg.match(/^\+/))
      options[:server_groups] << arg
    elsif (arg.match(/^#/))
      options[:key_groups] << arg
    elsif (File.exist?(arg))
      options[:files] << arg
    else
      options[:servers] << arg
    end
  end

  options
end

command = :list
context = :keys
key = nil
user = nil
groups = nil

parser = OptionParser.new do |parser|
  parser.on("-c", "--cache-path=s") do |path|
    Keyble.cache_path = path
  end
  parser.on("-s", "--servers") do
    context = :servers
  end
  parser.on("-a", "--add") do
    command = :add
  end
  parser.on("-r", "--remove") do
    command = :remove
  end
  parser.on("-d", "--delete") do
    command = :delete
  end
  parser.on("-i", "--import") do
    command = :import
  end
  parser.on("-l", "--list") do
    command = :list
  end
  parser.on("-f", "--find") do
    command = :find
  end
  parser.on("-h", "--help") do
    puts parser
    exit(0)
  end
end

args = interpret_args(parser.parse(*ARGV))

case (context)
when :servers
  case (command)
  when :add
    if (args[:keys].any?)
      STDERR.puts "Cannot add keys to servers listing."
      exit(-12)
    end
    
    Keyble.servers_add(args[:servers], groups)
  when :list
    if (Keyble.servers_cache.any?)
      Keyble.servers_display(Keyble.servers_cache)
    else
      puts "No servers in cache."
      exit(0)
    end
  end
when :keys
  case (command)
  when :add
    if (args[:keys].any?)
      if (args[:servers].any?)
        keys = Keyble.keys_cache.slice(args[:keys])

        Keyble.keys_add(keys, args[:servers])
      else
        STDERR.puts "No servers specified."
        exit(-11)
      end
    else
      puts parser
      exit(-1)
    end
  when :remove
    if (args[:keys].any?)
      if (args[:servers].any?)
        Keyble.keys_remove(args[:keys], args[:servers])
      else
        STDERR.puts "No servers specified."
        exit(-11)
      end
    else
      puts parser
      exit(-1)
    end
  when :delete
    if (args[:keys].any?)
      Keyble.keys_delete(args[:keys])
      
      if (args[:servers].any?)
        Keyble.keys_remove(args[:keys], args[:servers])
      end
    else
      puts parser
      exit(-1)
    end
  when :import
    if (args[:servers].any? or args[:files].any?)
      imported = { }

      if (args[:servers].any?)
        server_keys = Keyble.keys_get(args[:servers])
        
        server_keys.each do |server, keys|
          imported.merge!(keys)
        end
      end

      if (args[:files].any?)
        args[:files].each do |file|
          imported.merge!(Keyble.keys_read(file))
        end
      end

      Keyble.keys_cache_merge!(imported)
      Keyble.keys_cache_save!

      Keyble.keys_display(imported)
    else
      STDERR.puts "No servers or files specified"
      exit(-11)
    end
  when :list
    if (args[:servers].any?)
      collected = { }

      Keyble.keys_get(args[:servers]).each do |server, keys|
        if (args[:keys].any?)
          keys.reject! do |key, v|
            !args[:keys][key]
          end
        end

        if (keys.any?)
          collected[server] = keys
        end
      end

      collected.each do |server, keys|
        if (collected.length > 1)
          puts server
          puts '-' * 78
        end

        Keyble.keys_display(keys)
      end
    else
      if (Keyble.keys_cache.any?)
        Keyble.keys_display(Keyble.keys_cache)
      else
        puts "No keys in #{Keyble.cache_file_path(:keys)}"
      end
    end
  end
end  

